KONFIGURACJA
git init --separate-git-dir=/home/user/Dokumenty/GIT <-zainicjowanie pustego repozytorium Gita w określonym katalogu

git status <-będąc w katalogu z ustawionym repo GITa (zawierającym katalog ".git") pokaże status repozytorium od czasu ostatniego commita: jakie pliki dodaliśmy, jakie zmiany

git branch <-pokaże gałąź na której obecnie się znajdujemy

git config --list <-pokazuje listę zapisanych zmian konfiguracujnych (ustawień) GITa
git config --global nazwa.zmiennej wartość.zmiennej <-ustawia wartość dla zmiennej
git config --global user.email x@wp.pl <-w tym przykładzie ustawia mejla "x@wp.pl" dla użytkownika GITa



ŚLEDZENIE ZMIAN
git add nazwa_pliku <-dodanie nowego pliku "nazwa_pliku" do śledzenia w nim zmian przez GITa w fazie STAGING
git --all <-doda wszystkie pliki do poczekalni (do STAGING)

git commit -m "treść wiadomości opisującej zdarzenie kierowane do komisji czyli przez commit" <-tak się dodaje zmiany (zatwierdza je do repozytorium z opisem)
git commit -am <-dodaje wiadomość (m) oraz wszystkie zmienione pliki, ale nie dodaje nowych plików!

git diff <-pokazuje zmiany

git log <-wszystkie zmiany w repo
git log --pretty=oneline <-krótki opis (jedna linijka) zmian (pokazuje tylko: id, nazwę gałęzi, wiadomość opisującą zmianę)
git log --patch <-dłuższa wersja z pełnymi opisami zmian

git show id_commit <-pokazuje tylko jedną pozycję dotyczącą "id_commit"

git reset id_commit <-cofnie zmiany w STAGING do momentu wyznaczonego przez id_commit (zmiany po nim zostaną cofnięte), ale nic nie rusza w katalogu roboczym!
git reset --hard <-cofa stan gałęzi do stanu z poprzedniego commita

git checkout -b nowa_gałąź <-stworzenie nowej gałęzi i przełączenie się na nią
git checkout nazwa_gałęzi <-przełączenie na inną gałąź
git checkout - <-wywołanie komendy z myślnikiem powoduje przełączenie na poprzednio używaną gałąź
git checkout nazwa_pliku <-resetuje zmiany w danym pliku do stanu z poprzedniego commita

git branch --list <-pokaże wszystkie utworzone gałęzie
git branch -v <-pokazuje dostępne (utworzone) gałęzie
git branch -M main <-ustawia gałąź
git branch -d nazwa_gałęzi <-usuwa gałąź

git merge master <-łączy bieżącą gałąź z gałęzią master (dodaje commity do mastera)


ZDALNE REPOZYTORIA (np. GITHUB)
eval "$(ssh-agent -s)" <-uruchomi agenta ssh w tle
ssh-add ~/katalog/git-klucz <-dodaje prywatny klucz do agenta ssh

git remote add origin git@github.com:adam77c/Public_repo.git <-dodaje zdalne repo
git push -u origin main <-wypycha lokalne zmiany do zewnętrznego repo

git remote -v <-pokazuje zdalne repo, które zostało ustawione
git remote set-url origin git@github.com:OWNER/REPOSITORY.git <-zmienia URL zdalnego repo z HTTPS na SSH
git remote set-url origin git@github.com:adam77c/Public_repo.git <-przykład zmiany URL

git fetch <-pobiera nowe gałęzie ze zdalnego repo

git pull <-zaciąga commity ze zdalnego brancha (pull=fetch+merge)

git clone nazwa_repo <-klonowanie zdalnego repozytorium

pull request <-mechanizm do oceny kodu przed scaleniem (przed merge)




OPERACJE NA PLIKACH
git mv stara-nazwa_pliku nowa-nazwa_pliku <-zmiana nazwy pliku przez GITa aby jego zmiany były nadal śledzone (jeśli zmienimy nazwę w systemie plików z poziomu OS to GIT uzna to za skasowanie starego pliku i dodanie nowego który nie będzie śledzony)

git rm nazwa_pliku <-usunięcie pliku przez GITa (pokaże czy są niezatwierdzone commity)




3 ETAPY GITa
katalog roboczy -> przechowalnia (staging) -> repozytorium
Pracując w katalogu roboczym tworzymy pliki. Aby rozpocząć śledzenie zmian w plikach trzeba je dodać do przechowalni używając komendy "git add". Gdy już są śledzone, zmiany zatwierdzamy komendą "git commit" - tak są dodane do repozytorium, przed scaleniem w gałęzi.



COMMIT
kierowywać do komisji (np. parlamentarnej)
This proposal has been committed twice. (Ten projekt został skierowany do komisji dwa razy.)

W potocznym znaczeniu commit = popełniać, dopuszczać się.


